"""
Prompt Template for Generated Increments

This module provides the template structure for generating detailed coding prompts
for each feature increment.
"""

from datetime import datetime
from typing import List, Dict, Optional


def generate_prompt(
    feature_name: str,
    increment_number: int,
    total_increments: int,
    increment_name: str,
    overview: str,
    scope_description: str,
    whats_included: List[str],
    whats_not_included: List[str],
    previous_increments: List[str],
    existing_features: List[Dict[str, str]],  # [{"file": "path.md", "reason": "why"}]
    external_dependencies: List[str],
    user_value: str,
    user_story: str,
    acceptance_criteria: List[str],
    technical_constraints: List[str],
    testing_strategy: Dict[str, str],  # {"unit": "...", "integration": "...", "manual": "..."}
    edge_cases: List[str],
) -> str:
    """
    Generate a prompt file for a feature increment using the standard template.

    Args:
        feature_name: Name of the overall feature
        increment_number: Number of this increment (1-indexed)
        total_increments: Total number of increments for this feature
        increment_name: Name/title of this specific increment
        overview: Brief description of the feature and this increment
        scope_description: Detailed description of what will be built
        whats_included: List of specific functionality items included
        whats_not_included: List of functionality deferred to later increments
        previous_increments: List of references to previous increments
        existing_features: List of dicts with "file" and "reason" keys
        external_dependencies: List of external dependencies needed
        user_value: Clear statement of user value after completion
        user_story: User story in standard format
        acceptance_criteria: List of specific, testable criteria (3-5 minimum)
        technical_constraints: List of technical constraints/requirements
        testing_strategy: Dict with "unit", "integration", "manual" keys
        edge_cases: List of edge cases to consider

    Returns:
        Formatted prompt string following the standard template
    """
    # Format timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Build the prompt
    prompt = f"""# Feature: {feature_name}
# Increment {increment_number}: {increment_name}

## Overview
{overview}

## Scope of This Increment
{scope_description}

### What's Included
"""

    # Add included items
    for item in whats_included:
        prompt += f"- {item}\n"

    prompt += f"""
### What's NOT Included (Deferred to Later Increments)
"""

    # Add excluded items
    for item in whats_not_included:
        prompt += f"- {item}\n"

    prompt += f"""
## Dependencies

### Previous Increments
"""

    # Add previous increments
    if previous_increments:
        for inc in previous_increments:
            prompt += f"- {inc}\n"
    else:
        prompt += "- None (this is the first increment)\n"

    prompt += f"""
### Existing Features
"""

    # Add existing features
    if existing_features:
        for feature in existing_features:
            prompt += f"- [{feature['file']}] - {feature['reason']}\n"
    else:
        prompt += "- None\n"

    prompt += f"""
### External Dependencies
"""

    # Add external dependencies
    if external_dependencies:
        for dep in external_dependencies:
            prompt += f"- {dep}\n"
    else:
        prompt += "- None\n"

    prompt += f"""
## User Value
{user_value}

### User Story
{user_story}

## Acceptance Criteria
"""

    # Add acceptance criteria
    for i, criterion in enumerate(acceptance_criteria, 1):
        prompt += f"{i}. {criterion}\n"

    prompt += f"""
## Technical Constraints
"""

    # Add technical constraints
    if technical_constraints:
        for constraint in technical_constraints:
            prompt += f"- {constraint}\n"
    else:
        prompt += "- None specified\n"

    prompt += f"""
## Testing Strategy
- **Unit tests**: {testing_strategy.get('unit', 'To be defined')}
- **Integration tests**: {testing_strategy.get('integration', 'To be defined')}
- **Manual testing**: {testing_strategy.get('manual', 'To be defined')}

## Edge Cases to Consider
"""

    # Add edge cases
    if edge_cases:
        for edge_case in edge_cases:
            prompt += f"- {edge_case}\n"
    else:
        prompt += "- None identified\n"

    # Add footer
    prompt += f"""

---
**Generated by Feature Breakdown Agent**
**Date**: {timestamp}
**Feature**: {feature_name}
**Increment**: {increment_number} of {total_increments}
"""

    return prompt


def get_template_description() -> str:
    """
    Return a description of the template structure for use in system prompts.
    """
    return """
Each generated prompt must follow this structure:

# Feature: [Feature Name]
# Increment N: [Increment Name]

## Overview
[Brief description of the overall feature and this specific increment]

## Scope of This Increment
[Detailed description of what will be built in this increment]

### What's Included
- [Specific functionality item 1]
- [Specific functionality item 2]
- [Specific functionality item 3]

### What's NOT Included (Deferred to Later Increments)
- [Functionality deferred to next increment]
- [Future enhancements]

## Dependencies

### Previous Increments
- [Reference to increment N-1, if applicable]
- [What must be complete before this increment]

### Existing Features
- [Reference to existing_feature.md] - [Why it's relevant]
- [Another feature file] - [Integration points]

### External Dependencies
- [Third-party libraries, APIs, or services needed]
- [Infrastructure requirements]

## User Value
[Clear statement of what user can do after this increment is complete]

### User Story
As a [user type], I want to [action] so that [benefit].

## Acceptance Criteria
1. [Specific, testable criterion]
2. [Specific, testable criterion]
3. [Specific, testable criterion]
4. [Specific, testable criterion]
5. [Specific, testable criterion]

## Technical Constraints
- [Technology limitations]
- [Performance requirements]
- [Security considerations]
- [Scalability needs]

## Testing Strategy
- **Unit tests**: [What to test]
- **Integration tests**: [What to test]
- **Manual testing**: [What to verify]

## Edge Cases to Consider
- [Edge case 1 and how to handle]
- [Edge case 2 and how to handle]
- [Edge case 3 and how to handle]


---
**Generated by Feature Breakdown Agent**
**Date**: [Timestamp]
**Feature**: [Feature name]
**Increment**: N of M
"""
